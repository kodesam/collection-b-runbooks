Here is an example of a Dockerfile to create a Python container:

```Dockerfile
# Use an official Python runtime as the base image
FROM python:3.8-slim

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container
COPY requirements.txt .

# Install the Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the entire project directory into the container
COPY . .

# Expose a port (if needed)
EXPOSE 8080

# Set the command to run the application
CMD [ "python", "app.py" ]
```

In this example, the Dockerfile uses the official Python 3.8-slim base image. It sets the working directory, copies the requirements.txt file, installs the Python dependencies, copies the entire project directory, exposes a port (here, port 8080), and sets the command to run the application (assumed to be app.py). You can modify the file as per your project's requirements.
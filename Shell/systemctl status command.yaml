To use the `systemctl status` command in a Linux script, you can simply include it as a line of code. Here's an example script that retrieves the status of a particular service:

```bash
#!/bin/bash

SERVICE_NAME="my-service"

status_output=$(systemctl status $SERVICE_NAME)
exit_code=$?

if [ $exit_code -eq 0 ]; then
    echo "Service $SERVICE_NAME is running."
    echo -e "Status:\n$status_output"
else
    echo "Service $SERVICE_NAME is not running."
fi
```

In this script, replace 'my-service' with the name of the service you want to check the status for. The `status_output` variable captures the output of the `systemctl status` command, and the `exit_code` variable holds the exit status of the command.

You can then process the `status_output` as needed and take appropriate actions based on the exit code. In the example script, it prints the status output if the exit code is 0 (indicating success), or prints a message indicating that the service is not running if the exit code is not 0.
